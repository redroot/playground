{"version":3,"sources":["webpack:///webpack/bootstrap 24ee8e50b4a7f0fc404c","webpack:///./src/server.js","webpack:///external \"express\"","webpack:///external \"graphql-server-express\"","webpack:///external \"body-parser\"","webpack:///external \"cors\"","webpack:///./src/schema.js","webpack:///external \"graphql-tools\"","webpack:///./src/resolvers.js"],"names":["PORT","server","use","json","schema","endpointURL","listen","console","log","typeDefs","resolvers","items","id","url","link","Query","allItems"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;;AACA;;AAIA;;AACA;;AAEA;;;;AAEA,IAAMA,OAAO,IAAb;AACA,IAAMC,SAAS,uBAAf;AAEAA,OAAOC,GAAP,CAAW,oBAAX;AACAD,OAAOC,GAAP,CAAW,UAAX,EAAuB,oBAAWC,IAAX,EAAvB,EAA0C,0CAAe;AAAEC;AAAF,CAAf,CAA1C;AACAH,OAAOC,GAAP,CAAW,WAAX,EAAwB,2CAAgB;AAAEG,eAAa;AAAf,CAAhB,CAAxB;AACAJ,OAAOK,MAAP,CAAcN,IAAd,EAAoB;AAAA,SAClBO,QAAQC,GAAR,6DAAiER,IAAjE,EADkB;AAAA,CAApB,E;;;;;;AChBA,oC;;;;;;ACAA,mD;;;;;;ACAA,wC;;;;;;ACAA,iC;;;;;;;;;;;;;;ACAA;;AAKA;;AAEA,IAAMS,gHAAN;AAYA,IAAML,SAAS,wCAAqB;AAAEK,oBAAF;AAAYC;AAAZ,CAArB,CAAf;;;;;;;ACnBA,0C;;;;;;;;;;;;;ACAA,IAAMC,QAAQ,CACZ;AACEC,MAAI,CADN;AAEEC,OAAK,gBAFP;AAGEC,QAAM;AAHR,CADY,EAMZ;AACEF,MAAI,CADN;AAEEC,OAAK,mBAFP;AAGEC,QAAM;AAHR,CANY,CAAd;AAaO,IAAMJ,YAAY;AACvBK,SAAO;AACLC,cAAU;AAAA,aAAML,KAAN;AAAA;AADL;AADgB,CAAlB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 24ee8e50b4a7f0fc404c","import express from 'express';\nimport {\n  graphqlExpress,\n  graphiqlExpress,\n} from 'graphql-server-express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors'\n\nimport { schema } from './schema';\n\nconst PORT = 4000;\nconst server = express();\n\nserver.use(cors());\nserver.use('/graphql', bodyParser.json(), graphqlExpress({ schema }));\nserver.use('/graphiql', graphiqlExpress({ endpointURL: '/graphql' }));\nserver.listen(PORT, () =>\n  console.log(`GraphQL Server is now running on http://localhost:${PORT}`)\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/server.js","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"graphql-server-express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-server-express\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"cors\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cors\"\n// module id = 4\n// module chunks = 0","import {\n  makeExecutableSchema,\n  addMockFunctionsToSchema,\n} from 'graphql-tools';\n\nimport { resolvers } from './resolvers';\n\nconst typeDefs = `\ntype Item {\n  id: ID!\n  url: String\n  link: String\n}\n\ntype Query {\n  allItems: [Item]\n}\n`;\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\nexport { schema };\n\n\n\n// WEBPACK FOOTER //\n// ./src/schema.js","module.exports = require(\"graphql-tools\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-tools\"\n// module id = 6\n// module chunks = 0","const items = [\n  {\n    id: 1,\n    url: 'http://bbc.com',\n    link: 'The BBC'\n  },\n  {\n    id: 2,\n    url: 'https://noway.com',\n    link: 'No Way'\n  }\n]\n\nexport const resolvers = {\n  Query: {\n    allItems: () => items\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/resolvers.js"],"sourceRoot":""}